// ------------------------------
// script.js
// ------------------------------
// Todas as linhas abaixo t√™m coment√°rios explicativos em portugu√™s.
// Coment√°rios explicam o que cada linha / bloco faz, para aprendizado.
// ------------------------------


/* Seleciona o bot√£o de converter na p√°gina.
   querySelector retorna o primeiro elemento que combina com o seletor CSS. */
const convertButton = document.querySelector(".convert-button");

/* Seleciona o select da moeda destino (ex: USD, EUR, BRL).
   Usado para saber para qual moeda converter. */
const currencySelect = document.querySelector(".currency-select");

/* Seleciona o select da moeda origem (aquela que o usu√°rio tem).
   Usado para saber de qual moeda o valor ser√° convertido. */
const currencySelect1 = document.querySelector(".currency-select1");

/* Vari√°vel global que armazenar√° as taxas de c√¢mbio recebidas da API.
   Ser√° um objeto onde cada chave √© uma sigla de moeda (ex: USD, BRL) e o valor √© a taxa. */
let taxas = {};

/* Fun√ß√£o ass√≠ncrona que busca as taxas de c√¢mbio em uma API p√∫blica.
   Agora tamb√©m inclui o Bitcoin, usando uma segunda API espec√≠fica (CoinDesk). */
async function buscarTaxas(base = "USD") {
  try {
    // Faz requisi√ß√£o principal para obter taxas de c√¢mbio baseadas em 'base' (ex: USD)
    const resposta = await fetch(`https://api.exchangerate-api.com/v4/latest/${base}`);
    const dados = await resposta.json();

    // Guarda o objeto com as taxas das moedas comuns (USD, BRL, EUR, GBP, JPY, etc.)
    taxas = dados.rates;

    // ----------------------------
    // ü™ô BLOCO EXTRA: adiciona Bitcoin (BTC)
    // ----------------------------
   try {
  const respostaBTC = await fetch(
    "https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd"
  );
  const dadosBTC = await respostaBTC.json();

  // Valor atual de 1 BTC em USD
  const taxaBTCemUSD = dadosBTC.bitcoin.usd;

  // Calcula quanto 1 USD vale em BTC (mantendo compatibilidade com as outras moedas)
  taxas.BTC = 1 / taxaBTCemUSD;

  console.log("‚úÖ Taxa BTC adicionada (via CoinGecko):", taxas.BTC);
} catch (erroBTC) {
  console.warn("‚ö†Ô∏è N√£o foi poss√≠vel carregar taxa do Bitcoin (CoinGecko):", erroBTC);
}

    // Log completo no console para confirmar que as taxas est√£o OK
    console.log("‚úÖ Taxas atualizadas com base em:", base, taxas);

  } catch (erro) {
    // Se algo der errado (ex: sem internet ou API fora do ar)
    console.error("‚ùå Erro ao buscar taxas:", erro);
  }
}


/* Chama a fun√ß√£o para buscar taxas quando a p√°gina carrega.
   Aqui pegamos taxas com base no USD por padr√£o. */
buscarTaxas("USD");


/* Fun√ß√£o que executa a convers√£o quando o usu√°rio clica no bot√£o.
   Ela l√™ o valor digitado, as moedas selecionadas e calcula o valor convertido. */
function convertValues() {
  // Pega o valor digitado pelo usu√°rio no input (string).
  const inputCurrencyValueRaw = document.querySelector(".input-currency").value;

  // Converte a string para n√∫mero de ponto flutuante (float). trim() remove espa√ßos.
  const inputCurrencyValue = parseFloat(inputCurrencyValueRaw.trim());

  // Elemento que mostra o valor na moeda de origem (antes da convers√£o).
  const currencyValueToConvert = document.querySelector(".currency-value-to-convert");

  // Elemento que mostra o valor convertido (resultado final).
  const currencyValueConverted = document.querySelector(".currency-value");

  // Se o valor digitado n√£o for um n√∫mero v√°lido, mostra mensagem e sai da fun√ß√£o.
  if (isNaN(inputCurrencyValue)) {
    currencyValueConverted.innerHTML = "Digite um valor v√°lido";
    return;
  }

  // L√™ as siglas das moedas selecionadas (origem e destino) e transforma em mai√∫sculas.
  const from = currencySelect1.value.toUpperCase(); // moeda de origem (ex: USD)
  const to = currencySelect.value.toUpperCase();     // moeda de destino (ex: BRL)

  /* Checa se o objeto 'taxas' est√° dispon√≠vel e se contem as chaves necess√°rias.
     Se faltar alguma taxa, mostra mensagem de carregamento/erro e encerra. */
  if (!taxas || typeof taxas !== "object" || !taxas[from] || !taxas[to]) {
    currencyValueConverted.innerHTML = "Carregando taxas...";
    // Observa√ß√£o: se voc√™ quiser garantir m√°xima precis√£o, poderia chamar buscarTaxas(from)
    // aqui para atualizar as taxas com 'from' como base. Mantive comportamento simples.
    return;
  }

  /* C√°lculo da convers√£o:
     - 'taxas' cont√©m taxas relativas a uma BASE (no nosso caso usamos USD por padr√£o).
     - A f√≥rmula abaixo converte o valor de 'from' para 'to' usando as taxas dispon√≠veis.
     F√≥rmula: valorConvertido = (input / taxas[from]) * taxas[to]
     Isso funciona quando taxas[X] √© o valor de 1 BASE em X. */
  const valorConvertido = (inputCurrencyValue / taxas[from]) * taxas[to];

  /* Defini√ß√µes de formatos regionais para formata√ß√£o das moedas.
     A chave √© a sigla da moeda e o valor √© o locale (padr√£o de formata√ß√£o). */
  const formatos = {
    BRL: "pt-BR",
    USD: "en-US",
    EUR: "de-DE",
    GBP: "en-GB",
    JPY: "ja-JP",
    BTC: "en-US" // Bitcoin n√£o tem um locale espec√≠fico, usamos en-US como fallback
  };

  /* Cria formatadores de moeda (Intl.NumberFormat) para exibir os valores bonitinhos.
     Se n√£o houver um locale definido para a moeda, usamos 'en-US' como fallback. */
  const formatadorOrigem = new Intl.NumberFormat(formatos[from] || "en-US", {
    style: "currency",
    currency: from
  });

  const formatadorDestino = new Intl.NumberFormat(formatos[to] || "en-US", {
    style: "currency",
    currency: to
  });

  // Exibe o valor original formatado (ex: "R$ 10,00") no elemento correspondente.
  currencyValueToConvert.innerHTML = formatadorOrigem.format(inputCurrencyValue);

  // Exibe o valor convertido formatado (ex: "$ 2.00") no elemento correspondente.
  currencyValueConverted.innerHTML = formatadorDestino.format(valorConvertido);
}


/* Fun√ß√£o chamada quando o select da moeda destino (currencySelect) muda.
   Atualiza o texto do nome da moeda e a imagem exibida ‚Äî para ficar visual. */
function changeCurrency() {
  // Seleciona novamente (pode remover se usar as constantes globais, mas deixei para clareza)
  const currencySelect = document.querySelector(".currency-select");

  // Elemento que mostra o nome por extenso da moeda destino (ex: "D√≥lar Americano").
  const currencyName = document.getElementById("currency-name");

  // Elemento <img> que exibe a bandeira/√≠cone da moeda destino.
  const currencyImg = document.querySelector(".currency-img");


  // Para cada op√ß√£o, atualizamos o nome e a imagem.
  if (currencySelect.value == "USD") {
    currencyName.innerHTML = "D√≥lar Americano";
    currencyImg.src = "./assets/dolar.png";
  }

  if (currencySelect.value == "EUR") {
    currencyName.innerHTML = "Euro";
    currencyImg.src = "./assets/euro.png";
  }

  if (currencySelect.value == "GBP") {
    currencyName.innerHTML = "Libra";
    currencyImg.src = "./assets/libra.png";
  }

  if (currencySelect.value == "JPY") {
    currencyName.innerHTML = "Iene";
    currencyImg.src = "./assets/iene.png";
  }

  if (currencySelect.value == "BRL") {
    currencyName.innerHTML = "Real Brasileiro";
    currencyImg.src = "./assets/real.png";
  }
   if (currencySelect.value == "BTC") {
    currencyName.innerHTML = "Bitcoin";
    currencyImg.src = "./assets/bitcoin.png";
  }

  // Ap√≥s trocar a apresenta√ß√£o visual, rodamos a convers√£o novamente para atualizar os valores.
  convertValues();
}


/* Fun√ß√£o chamada quando o select da moeda de origem (currencySelect1) muda.
   Atualiza o nome, a imagem e tamb√©m um placeholder do valor que ser√° convertido. */
function changeCurrency1() {
  // Seleciona elementos necess√°rios.
  const currencySelect1 = document.querySelector(".currency-select1");
  const currencyName1 = document.getElementById("currency-name1");
  const currencyImg1 = document.querySelector(".currency-img1");
  const currencyValueToConvert = document.querySelector(".currency-value-to-convert");

  // Log para facilitar o debug caso necess√°rio (mostra qual moeda foi selecionada).
  console.log("Moeda origem selecionada:", currencySelect1.value);


  // Atualiza nome, imagem e placeholder do valor de acordo com a moeda origem.
  if (currencySelect1.value == "USD") {
    currencyName1.innerHTML = "D√≥lar Americano";
    currencyImg1.src = "./assets/dolar.png";
    currencyValueToConvert.innerHTML = "$ 0.00";
  }

  if (currencySelect1.value == "BRL") {
    currencyName1.innerHTML = "Real Brasileiro";
    currencyImg1.src = "./assets/real.png";
    currencyValueToConvert.innerHTML = "R$ 0.00";
  }

  if (currencySelect1.value == "EUR") {
    currencyName1.innerHTML = "Euro";
    currencyImg1.src = "./assets/euro.png";
    currencyValueToConvert.innerHTML = "‚Ç¨ 0,00";
  }

  if (currencySelect1.value == "GBP") {
    currencyName1.innerHTML = "Libra";
    currencyImg1.src = "./assets/libra.png";
    currencyValueToConvert.innerHTML = "¬£ 0.00";
  }

  if (currencySelect1.value == "JPY") {
    currencyName1.innerHTML = "Iene";
    currencyImg1.src = "./assets/iene.png";
    currencyValueToConvert.innerHTML = "¬• 0";
  }

  if (currencySelect1.value == "BTC") {
    currencyName1.innerHTML = "Bitcoin";
    currencyImg1.src = "./assets/bitcoin.png";
    currencyValueToConvert.innerHTML = "‚Çø 0.00000000";
  }

  // Opcional: atualiza as taxas com base na moeda de origem para evitar pequenas imprecis√µes.
  // Comentado por padr√£o (n√£o obrigat√≥rio), mas est√° aqui como sugest√£o:
  // buscarTaxas(currencySelect1.value); // atualiza 'taxas' usando a moeda de origem como base

  // Atualiza a convers√£o exibida (caso j√° exista um valor digitado).
  convertValues();
}


/* Adiciona os listeners aos elementos se eles existirem no DOM.
   Isso evita erros caso o script seja carregado em uma p√°gina que n√£o tenha esses elementos. */
if (currencySelect) {
  currencySelect.addEventListener("change", changeCurrency);
}

if (currencySelect1) {
  currencySelect1.addEventListener("change", changeCurrency1);
}

if (convertButton) {
  convertButton.addEventListener("click", convertValues);
}

/* FIM do arquivo
   Observa√ß√µes / dicas:
   1) A API usada retorna taxas com base em uma moeda 'base'. Se quiser m√°xima precis√£o ao converter
      de X para Y, voc√™ pode chamar buscarTaxas(X) antes de converter, garantindo que taxas[X] === 1.
   2) Verifique se os arquivos de imagem (./assets/*.png) existem e os ids/classes do HTML batem com este script.
   3) Para produ√ß√£o, trate erros de rede com mensagens vis√≠veis ao usu√°rio (n√£o s√≥ console).
   4) Se quiser convers√µes em "tempo real" conforme o usu√°rio digita, adicione um listener 'input' no campo
      .input-currency e chame convertValues() com debounce (evitar muitas requisi√ß√µes).
*/
